{
  "_args": [
    [
      "filequeue@0.5.0",
      ""
    ]
  ],
  "_from": "filequeue@0.5.0",
  "_id": "filequeue@0.5.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/filequeue",
  "_npmUser": {
    "email": "trey.griffith@gmail.com",
    "name": "treygriffith"
  },
  "_npmVersion": "1.2.17",
  "_phantomChildren": {},
  "_requested": {
    "name": "filequeue",
    "raw": "filequeue@0.5.0",
    "rawSpec": "0.5.0",
    "scope": null,
    "spec": "0.5.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/filequeue/-/filequeue-0.5.0.tgz",
  "_shasum": "f0048a5af4530447dacef06c4868c50a11406179",
  "_shrinkwrap": null,
  "_spec": "filequeue@0.5.0",
  "_where": "",
  "author": {
    "email": "trey.griffith@gmail.com",
    "name": "Trey Griffith"
  },
  "bugs": {
    "url": "https://github.com/treygriffith/filequeue/issues"
  },
  "dependencies": {},
  "description": "Drop-in Replacement for fs to prevent too many open files",
  "devDependencies": {
    "mocha": "1.7.4",
    "temp": "0.5.x"
  },
  "directories": {},
  "dist": {
    "shasum": "f0048a5af4530447dacef06c4868c50a11406179",
    "tarball": "https://registry.npmjs.org/filequeue/-/filequeue-0.5.0.tgz"
  },
  "engines": {
    "node": "0.10.x"
  },
  "homepage": "https://github.com/treygriffith/filequeue",
  "keywords": [
    "emfile",
    "filesystem",
    "fs",
    "queue"
  ],
  "main": "./index.js",
  "maintainers": [
    {
      "name": "treygriffith",
      "email": "trey.griffith@gmail.com"
    }
  ],
  "name": "filequeue",
  "optionalDependencies": {},
  "readme": "Filequeue\n==============\n### Drop-in Replacement for `fs` that avoids `Error: EMFILE, too many open files`.\n\nAs of version 0.4.0, `Filequeue` supports Node 0.10.x, and as of version 0.5.0, it has basic Streams support.\n\n`Filequeue` was born out of my encounter with `Error: EMFILE, too many open files`, which occurs when you try to open too many files at once on your system. Due to Node's asynchronous nature, if you perform a lot of `fs.readFile` or similar operations in quick succession, you can easily hit your system's `maxfiles` limit, usually set to 256 on a dev box.\n\n`Filequeue` creates a replacement for `fs`, that I use as `fq` with many of the same operations. However, it keeps track of how many files are open at once, and queues them if there are too many.\n\nInstallation\n-------------\n\nThrough [NPM](http://www.npmjs.org)\n``` bash\n$ npm install filequeue\n```\n\n or using Git\n``` bash\n$ git clone git://github.com/treygriffith/filequeue.git node_modules/filequeue/\n```\n\nHow to Use\n-----------\n\n#### Instantiate Filequeue with a maximum number of files to be opened at once (default is 200)\n\n``` javascript\n  var FileQueue = require('filequeue');\n  var fq = new FileQueue(100);\n\n  // additional instances will attempt to use the same instance (and therefore the same maxfiles)\n\n  var FileQueue2 = require('filequeue');\n  var fq2 = new FileQueue2(100);\n\n  console.log(fq === fq2); // => true\n\n  // you can force a new instance of filequeue with the `newQueue` parameter\n\n  var fq3 = new FileQueue(100, true);\n\n  console.log(fq === fq3); // => false\n\n```\n\n#### Use any of the following supported `fs` methods\n* [readFile](http://nodejs.org/docs/v0.10.15/api/fs.html#fs_fs_readfile_filename_options_callback)\n* [writeFile](http://nodejs.org/docs/v0.10.15/api/fs.html#fs_fs_writefile_filename_data_options_callback)\n* [readdir](http://nodejs.org/docs/v0.10.15/api/fs.html#fs_fs_readdir_path_callback)\n* [rename](http://nodejs.org/docs/v0.10.15/api/fs.html#fs_fs_rename_oldpath_newpath_callback)\n* [symlink](http://nodejs.org/docs/latest/api/fs.html#fs_fs_symlink_srcpath_dstpath_type_callback)\n* [mkdir](http://nodejs.org/docs/v0.10.15/api/fs.html#fs_fs_mkdir_path_mode_callback)\n* [stat](http://nodejs.org/docs/v0.10.15/api/fs.html#fs_fs_stat_path_callback)\n* [exists](http://nodejs.org/docs/v0.10.15/api/fs.html#fs_fs_exists_path_callback)\n* [createReadStream](http://nodejs.org/docs/v0.10.15/api/fs.html#fs_fs_createreadstream_path_options)\n* [createWriteStream](http://nodejs.org/docs/v0.10.15/api/fs.html#fs_fs_createwritestream_path_options)\n\n``` javascript\n  for(var i=0; i<1000; i++) {\n    fq.readFile('/somefile.txt', {encoding: 'utf8'}, function(err, somefile) {\n      console.log(\"data from somefile.txt without crashing!\", somefile);\n    });\n  }\n```\n\nOther Methods\n-------------\nAdding a new `fs` method is simple, just add it to the `methods.js` file following the conventions therein.\n\nPull requests to add other fs methods with tests exercising them are welcome.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/treygriffith/filequeue.git"
  },
  "version": "0.5.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "0.10.x"
      },
      "pkgid": "filequeue@0.5.0"
    },
    {
      "code": "ENOTSUP",
      "required": {
        "node": "0.10.x"
      },
      "pkgid": "filequeue@0.5.0"
    }
  ]
}
